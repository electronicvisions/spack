From f091063c37d6d5450de8477e93409d334d17b90c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Johann=20Kl=C3=A4hn?= <johann.klaehn@kip.uni-heidelberg.de>
Date: Mon, 17 Jul 2017 12:25:49 +0200
Subject: [PATCH 07/12] [libclang] Allow visiting of implicit declarations

---
 bindings/python/clang/cindex.py             | 29 +++++++++++++++----
 bindings/python/tests/cindex/test_cursor.py | 14 +++++++++
 include/clang-c/Index.h                     | 13 +++++++++
 tools/libclang/CIndex.cpp                   | 45 +++++++++++++++++++++++++----
 tools/libclang/CursorVisitor.h              |  7 ++++-
 tools/libclang/libclang.exports             |  2 ++
 6 files changed, 98 insertions(+), 12 deletions(-)

diff --git a/tools/clang/bindings/python/clang/cindex.py b/tools/clang/bindings/python/clang/cindex.py
index 496e1089ad..7f4d5bdf47 100644
--- a/tools/clang/bindings/python/clang/cindex.py
+++ b/tools/clang/bindings/python/clang/cindex.py
@@ -1489,6 +1489,10 @@ class Cursor(Structure):
         """
         return conf.lib.clang_EnumDecl_isScoped(self)
 
+    def is_implicit(self):
+        """Test whether the cursor refers to an implicit declaration."""
+        return conf.lib.clang_isImplicit(self)
+
     def get_definition(self):
         """
         If the cursor is a reference to a declaration or a declaration of
@@ -1773,8 +1777,11 @@ class Cursor(Structure):
         """Returns the value of the indicated arg as an unsigned 64b integer."""
         return conf.lib.clang_Cursor_getTemplateArgumentUnsignedValue(self, num)
 
-    def get_children(self):
-        """Return an iterator for accessing the children of this cursor."""
+    def get_children(self, with_implicit=False):
+        """Return an iterator for accessing the children of this cursor.
+
+        By default, cursors representing implicit declarations will be skipped.
+        This can be controlled via with_implicit."""
 
         # FIXME: Expose iteration from CIndex, PR6125.
         def visitor(child, parent, children):
@@ -1787,17 +1794,19 @@ class Cursor(Structure):
             children.append(child)
             return 1 # continue
         children = []
-        conf.lib.clang_visitChildren(self, callbacks['cursor_visit'](visitor),
-            children)
+        dispatch = conf.lib.clang_visitChildren
+        if with_implicit:
+            dispatch = conf.lib.clang_visitChildrenWithImplicit
+        dispatch(self, callbacks['cursor_visit'](visitor), children)
         return iter(children)
 
-    def walk_preorder(self):
+    def walk_preorder(self, with_implicit=False):
         """Depth-first preorder walk over the cursor and its descendants.
 
         Yields cursors.
         """
         yield self
-        for child in self.get_children():
+        for child in self.get_children(with_implicit=with_implicit):
             for descendant in child.walk_preorder():
                 yield descendant
 
@@ -3795,6 +3804,10 @@ functionList = [
    [Type],
    bool),
 
+  ("clang_isImplicit",
+   [Cursor],
+   bool),
+
   ("clang_isInvalid",
    [CursorKind],
    bool),
@@ -3854,6 +3867,10 @@ functionList = [
    [Cursor, callbacks['cursor_visit'], py_object],
    c_uint),
 
+  ("clang_visitChildrenWithImplicit",
+   [Cursor, callbacks['cursor_visit'], py_object],
+   c_uint),
+
   ("clang_Cursor_getNumArguments",
    [Cursor],
    c_int),
diff --git a/tools/clang/bindings/python/tests/cindex/test_cursor.py b/tools/clang/bindings/python/tests/cindex/test_cursor.py
index 3cd499ea11..fc25d8a9df 100644
--- a/tools/clang/bindings/python/tests/cindex/test_cursor.py
+++ b/tools/clang/bindings/python/tests/cindex/test_cursor.py
@@ -68,6 +68,20 @@ def test_get_children():
     assert tu_nodes[2].displayname == 'f0(int, int)'
     assert tu_nodes[2].is_definition() == True
 
+def test_get_children_with_implicit():
+    tu = get_tu('struct X {}; X x;', lang='cpp')
+    cursor = get_cursor(tu, 'X')
+
+    children = list(cursor.get_children())
+    assert len(children) == 0
+
+    children = list(cursor.get_children(with_implicit=True))
+    assert len(children) > 0
+    for child in children:
+        assert child.is_implicit()
+        assert child.spelling == "X"
+        assert child.kind in [CursorKind.CONSTRUCTOR, CursorKind.STRUCT_DECL]
+
 def test_references():
     """Ensure that references to TranslationUnit are kept."""
     tu = get_tu('int x;')
diff --git a/tools/clang/include/clang-c/Index.h b/tools/clang/include/clang-c/Index.h
index 402ca9a436..416899afb8 100644
--- a/tools/clang/include/clang-c/Index.h
+++ b/tools/clang/include/clang-c/Index.h
@@ -2670,6 +2670,11 @@ CINDEX_LINKAGE unsigned clang_isPreprocessing(enum CXCursorKind);
  */
 CINDEX_LINKAGE unsigned clang_isUnexposed(enum CXCursorKind);
 
+/***
+ * \brief Determine whether the given cursor represents an implicit declaration.
+ */
+CINDEX_LINKAGE unsigned clang_isImplicit(CXCursor);
+
 /**
  * \brief Describe the linkage of the entity referred to by a cursor.
  */
@@ -3962,6 +3967,14 @@ CINDEX_LINKAGE unsigned clang_visitChildrenWithBlock(CXCursor parent,
 #endif
 
 /**
+ * Visits the children of a cursor, including implicit declarations.  Behaves
+ * identically to clang_visitChildren() in all other respects.
+ */
+CINDEX_LINKAGE unsigned
+clang_visitChildrenWithImplicit(CXCursor parent, CXCursorVisitor visitor,
+                                CXClientData client_data);
+
+/**
  * @}
  */
 
diff --git a/tools/clang/tools/libclang/CIndex.cpp b/tools/clang/tools/libclang/CIndex.cpp
index 621bc42076..20011b1a92 100644
--- a/tools/clang/tools/libclang/CIndex.cpp
+++ b/tools/clang/tools/libclang/CIndex.cpp
@@ -192,10 +192,11 @@ bool CursorVisitor::Visit(CXCursor Cursor, bool CheckedRegionOfInterest) {
       assert(0 && "Invalid declaration cursor");
       return true; // abort.
     }
-    
-    // Ignore implicit declarations, unless it's an objc method because
-    // currently we should report implicit methods for properties when indexing.
-    if (D->isImplicit() && !isa<ObjCMethodDecl>(D))
+
+    // Unless instructed otherwise we ignore implicit declarations.
+    // ObjC methods are currently visited in any case, because implicit methods
+    // for properties should be reported when indexing.
+    if (!VisitImplicitDeclarations && D->isImplicit() && !isa<ObjCMethodDecl>(D))
       return false;
   }
 
@@ -702,8 +703,12 @@ bool CursorVisitor::VisitClassTemplateSpecializationDecl(
                                           ClassTemplateSpecializationDecl *D) {
   bool ShouldVisitBody = false;
   switch (D->getSpecializationKind()) {
-  case TSK_Undeclared:
   case TSK_ImplicitInstantiation:
+    if (VisitImplicitDeclarations) {
+      ShouldVisitBody = true;
+      break;
+    }
+  case TSK_Undeclared:
     // Nothing to visit
     return false;
       
@@ -4312,6 +4317,20 @@ unsigned clang_visitChildrenWithBlock(CXCursor parent,
   return clang_visitChildren(parent, visitWithBlock, block);
 }
 
+unsigned clang_visitChildrenWithImplicit(CXCursor parent,
+                                         CXCursorVisitor visitor,
+                                         CXClientData client_data) {
+  CursorVisitor CursorVis(getCursorTU(parent), visitor, client_data,
+                          /*VisitPreprocessorLast=*/false,
+                          /*VisitIncludedPreprocessingEntries=*/false,
+                          /*RegionOfInterest=*/SourceRange(),
+                          /*VisitDeclsOnly=*/false,
+                          /*PostChildrenVisitor=*/nullptr,
+                          /*VisitImplicitDeclarations=*/true);
+
+  return CursorVis.VisitChildren(parent);
+}
+
 static CXString getDeclSpelling(const Decl *D) {
   if (!D)
     return cxstring::createEmpty();
@@ -5400,6 +5419,22 @@ unsigned clang_isUnexposed(enum CXCursorKind K) {
   }
 }
 
+unsigned clang_isImplicit(CXCursor Cursor) {
+  if (clang_isInvalid(Cursor.kind))
+    return false;
+
+  if (!clang_isDeclaration(Cursor.kind))
+    return false;
+
+  const Decl *D = getCursorDecl(Cursor);
+  if (!D) {
+    assert(0 && "Invalid declaration cursor");
+    return true; // abort.
+  }
+
+  return D->isImplicit();
+}
+
 CXCursorKind clang_getCursorKind(CXCursor C) {
   return C.kind;
 }
diff --git a/tools/clang/tools/libclang/CursorVisitor.h b/tools/clang/tools/libclang/CursorVisitor.h
index 82f251a348..5f11aab100 100644
--- a/tools/clang/tools/libclang/CursorVisitor.h
+++ b/tools/clang/tools/libclang/CursorVisitor.h
@@ -96,6 +96,9 @@ private:
   /// record entries.
   bool VisitDeclsOnly;
 
+  /// \brief Whether we should visit implicit declarations.
+  bool VisitImplicitDeclarations;
+
   // FIXME: Eventually remove.  This part of a hack to support proper
   // iteration over all Decls contained lexically within an ObjC container.
   DeclContext::decl_iterator *DI_current;
@@ -147,7 +150,8 @@ public:
                 bool VisitIncludedPreprocessingEntries = false,
                 SourceRange RegionOfInterest = SourceRange(),
                 bool VisitDeclsOnly = false,
-                PostChildrenVisitorTy PostChildrenVisitor = nullptr)
+                PostChildrenVisitorTy PostChildrenVisitor = nullptr,
+                bool VisitImplicitDeclarations = false)
     : TU(TU), AU(cxtu::getASTUnit(TU)),
       Visitor(Visitor), PostChildrenVisitor(PostChildrenVisitor),
       ClientData(ClientData),
@@ -155,6 +159,7 @@ public:
       VisitIncludedEntities(VisitIncludedPreprocessingEntries),
       RegionOfInterest(RegionOfInterest),
       VisitDeclsOnly(VisitDeclsOnly),
+      VisitImplicitDeclarations(VisitImplicitDeclarations),
       DI_current(nullptr), FileDI_current(nullptr)
   {
     Parent.kind = CXCursor_NoDeclFound;
diff --git a/tools/clang/tools/libclang/libclang.exports b/tools/clang/tools/libclang/libclang.exports
index 9c56e88052..be81dcd893 100644
--- a/tools/clang/tools/libclang/libclang.exports
+++ b/tools/clang/tools/libclang/libclang.exports
@@ -291,6 +291,7 @@ clang_isDeclaration
 clang_isExpression
 clang_isFileMultipleIncludeGuarded
 clang_isFunctionTypeVariadic
+clang_isImplicit
 clang_isInvalid
 clang_isPODType
 clang_isPreprocessing
@@ -331,6 +332,7 @@ clang_CompileCommand_getNumArgs
 clang_CompileCommand_getArg
 clang_visitChildren
 clang_visitChildrenWithBlock
+clang_visitChildrenWithImplicit
 clang_ModuleMapDescriptor_create
 clang_ModuleMapDescriptor_dispose
 clang_ModuleMapDescriptor_setFrameworkModuleName
-- 
2.13.0

