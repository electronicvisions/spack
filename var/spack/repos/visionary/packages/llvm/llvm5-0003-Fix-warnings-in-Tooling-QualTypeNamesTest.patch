From 1ef6a85f73cb4f06405dfe20c225bcc0da9f9776 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Johann=20Kl=C3=A4hn?= <johann.klaehn@kip.uni-heidelberg.de>
Date: Wed, 26 Jul 2017 15:09:28 +0200
Subject: [PATCH 03/12] Fix warnings in Tooling/QualTypeNamesTest

The code in question uses variadic templates and alias declarations
and thus needs `-std=c++11`.
---
 unittests/Tooling/QualTypeNamesTest.cpp | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/tools/clang/unittests/Tooling/QualTypeNamesTest.cpp b/tools/clang/unittests/Tooling/QualTypeNamesTest.cpp
index edd5060ba0..532fae6f5a 100644
--- a/tools/clang/unittests/Tooling/QualTypeNamesTest.cpp
+++ b/tools/clang/unittests/Tooling/QualTypeNamesTest.cpp
@@ -35,7 +35,7 @@ struct TypeNameVisitor : TestVisitor<TypeNameVisitor> {
         EXPECT_TRUE(false) << "Typename::getFullyQualifiedName failed for "
                            << VD->getQualifiedNameAsString() << std::endl
                            << "   Actual: " << ActualName << std::endl
-                           << " Exepcted: " << ExpectedName;
+                           << " Expected: " << ExpectedName;
       }
     }
     return true;
@@ -163,7 +163,7 @@ TEST(QualTypeNameTest, getFullyQualifiedName) {
       "};\n"
       "EnumScopeClass::AnEnum AnEnumVar;\n",
       TypeNameVisitor::Lang_CXX11
-);
+  );
 
   TypeNameVisitor Complex;
   Complex.ExpectedQualTypeNames["CheckTX"] = "B::TX";
@@ -180,7 +180,9 @@ TEST(QualTypeNameTest, getFullyQualifiedName) {
       "  typedef tuple<X> TX;"
       "  TX CheckTX;"
       "  struct A { typedef int X; };"
-      "}");
+      "}",
+      TypeNameVisitor::Lang_CXX11
+  );
 
   TypeNameVisitor GlobalNsPrefix;
   GlobalNsPrefix.WithGlobalNsPrefix = true;
@@ -215,7 +217,8 @@ TEST(QualTypeNameTest, getFullyQualifiedName) {
       "      aStruct CheckK;\n"
       "    }\n"
       "  }\n"
-      "}\n"
+      "}\n",
+      TypeNameVisitor::Lang_CXX11
   );
 }
 
-- 
2.13.0

