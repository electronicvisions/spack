@Library("jenlib") _

/**
 * Temporary files for the build, to be deleted at the end of every job.
 * We replace '/tmp' because it might not feature enough space for large builds
 * by some network-mounted large storage.
 */
env.TMPDIR = "/wang/environment/software/jessie/spack/tmp/" + UUID.randomUUID().toString()

/**
 * Build was triggered by some gerrit event
 */
GERRIT_BUILD = (boolean) env.GERRIT_CHANGE_NUMBER

/**
 * Build was triggered by a "merged" event from gerrit
 */
MERGE_BUILD = (env.GERRIT_EVENT_TYPE == "change-merged")


try {
	node {
		withEnv(['ftp_proxy=ftp://proxy.kip.uni-heidelberg.de:2121',
		         'http_proxy=http://proxy.kip.uni-heidelberg.de:8080',
		         'https_proxy=http://proxy.kip.uni-heidelberg.de:8080',
		         'no_proxy=localhost,kip,kip.uni-heidelberg.de,129.206.179.*,129.20'
		]
		) {
			if (GERRIT_BUILD) {
				LIVE_INSTANCE = "/wang/environment/software/jessie/spack/${env.GERRIT_BRANCH}_live"
				STAGE_INSTANCE = "/wang/environment/software/jessie/spack/${env.GERRIT_BRANCH}_staging"
			}

			// Branch is not available when not triggered via gerrit
			// TODO: Fix this when moving to a different branch!
			NIGHTLY_INSTANCE = "/wang/environment/software/jessie/spack/20180129_nightly"

			COMPILER = "gcc@7.2.0 %gcc"
			PY2 = "python@2.7.14"
			PY3 = "python@3.6.3"

			if (MERGE_BUILD) {
				// Clean up stages of this changeset
				sh "rm -rf ${STAGE_INSTANCE}/c${env.GERRIT_CHANGE_NUMBER}p*"

				WORKING_DIR = LIVE_INSTANCE
			} else if (GERRIT_BUILD) {
				// Has to live on the same device as LIVE_INSTANCE for hardlinking spack views
				WORKING_DIR = "${STAGE_INSTANCE}/c${env.GERRIT_CHANGE_NUMBER}p${env.GERRIT_PATCHSET_NUMBER}"
			} else {
				WORKING_DIR = NIGHTLY_INSTANCE
				dir(WORKING_DIR) { "sh find -delete" }
			}

			dir(WORKING_DIR) {
				checkout scm
			}

			stage('stack') {
				if (!MERGE_BUILD && GERRIT_BUILD) {
					sh "cd ${WORKING_DIR} && " +
					   // we need two -f to also be able to deal with .git files that can
					   // be added by sources of packages
					   "git clean -dfxf && " +
					   ". share/spack/setup-env.sh && " +
					   "spack stack ${LIVE_INSTANCE}"
				} else {
					echo "Omitting stack for nightly build."
				}
			}

			stage('compiler') {
				sh "cd ${WORKING_DIR} && " +
				   "set +x && " +
				   ". share/spack/setup-env.sh && " +
				   "set -x && " +
				   "bash -x .ci/01_ensure_gcc.sh "
			}

			stage('dlspy2') {
				sh "env && " +
				   "cd ${WORKING_DIR} && " +
				   "set +x && " +
				   ". share/spack/setup-env.sh &&" +
				   "set -x && " +
				   "bash -ex .ci/02_install.sh dls_py2 \'visionary-dls ~dev ^${PY2}\' \'${COMPILER}\' && " +
				   "bash -ex .ci/02_install.sh dls_py2_dev \'visionary-dls ^${PY2}\' \'${COMPILER}\'"
			}

			stage('dlspy3') {
				sh "env && " +
				   "cd ${WORKING_DIR} && " +
				   "set +x && " +
				   ". share/spack/setup-env.sh &&" +
				   "set -x && " +
				   "bash -ex .ci/02_install.sh dls_py3 \'visionary-dls ~dev ^${PY3}\' \'${COMPILER}\' && " +
				   "bash -ex .ci/02_install.sh dls_py3_dev \'visionary-dls ^${PY3}\' \'${COMPILER}\'"
			}

			stage('wafer') {
				sh "env && " +
				   "cd ${WORKING_DIR} && " +
				   "set +x && " +
				   ". share/spack/setup-env.sh &&" +
				   "set -x && " +
				   "strace -o somefile1 -t -f bash -ex .ci/02_install.sh wafer_wot_py2 \'visionary-wafer ~dev ^${PY2}\' \'${COMPILER}\' && " +
				   "strace -o somefile2 -t -f bash -ex .ci/02_install.sh wafer_wot_py2_dev \'visionary-wafer ^${PY2}\' \'${COMPILER}\' && " +
				   "strace -o somefile3 -t -f bash -ex .ci/02_install.sh wafer_wt_py2 \'visionary-wafer ~dev  +tensorflow ^${PY2}\' \'${COMPILER}\' 'local' && " +
				   "strace -o somefile4 -t -f bash -ex .ci/02_install.sh wafer_wt_py2_dev \'visionary-wafer +tensorflow ^${PY2}\' \'${COMPILER}\' 'local'"
			}

			stage('analysis_py2') {
				sh "env && " +
				   "cd ${WORKING_DIR} && " +
				   "set +x && " +
				   ". share/spack/setup-env.sh &&" +
				   "set -x && " +
				   "bash -ex .ci/02_install.sh analysis_py2 \'visionary-analysis ~dev ^${PY2}\' \'${COMPILER}\' && " +
				   "bash -ex .ci/02_install.sh analysis_py2_dev \'visionary-analysis ^${PY2}\' \'${COMPILER}\'"
			}

			stage('analysis_py3') {
				sh "env && " +
				   "cd ${WORKING_DIR} && " +
				   "set +x && " +
				   ". share/spack/setup-env.sh &&" +
				   "set -x && " +
				   "bash -ex .ci/02_install.sh analysis_py3 \'visionary-analysis ~dev ^${PY3}\' \'${COMPILER}\' && " +
				   "bash -ex .ci/02_install.sh analysis_py3_dev \'visionary-analysis ^${PY3}\' \'${COMPILER}\'"
			}

			stage('simulation_py2') {
				sh "env && " +
				   "cd ${WORKING_DIR} && " +
				   "set +x && " +
				   ". share/spack/setup-env.sh &&" +
				   "set -x && " +
				   "bash -ex .ci/02_install.sh simulation_py2 \'visionary-simulation ~dev ^${PY2}\' \'${COMPILER}\' && " +
				   "bash -ex .ci/02_install.sh simulation_py2_dev \'visionary-simulation ^${PY2}\' \'${COMPILER}\'"
			}

			stage('dev_tools_py3') {
				sh "env && " +
				   "cd ${WORKING_DIR} && " +
				   "set +x && " +
				   ". share/spack/setup-env.sh &&" +
				   "set -x && " +
				   "bash -ex .ci/02_install.sh dev_tools_py3 \'visionary-dev-tools ^${PY3}\' \'${COMPILER}\'"
			}

			stage('dev_tools_py2') {
				sh "env && " +
				   "cd ${WORKING_DIR} && " +
				   "set +x && " +
				   ". share/spack/setup-env.sh &&" +
				   "set -x && " +
				   "bash -ex .ci/02_install.sh dev_tools_py2 \'visionary-dev-tools ^${PY2}\' \'${COMPILER}\'"
			}

			stage('dlsdemos') {
				sh "env && " +
				   "cd ${WORKING_DIR} && " +
				   "set +x && " +
				   ". share/spack/setup-env.sh &&" +
				   "set -x && " +
				   "bash -ex .ci/02_install.sh dls_demos \'visionary-dls-demos ^${PY2}\' \'${COMPILER}\'"
			}
		}
	}
} catch (Throwable t) {
	notifyFailure(mattermostChannel: "#spack")
	throw t
} finally {
	node {
		stage('Cleanup') {
			// Remove temporary files
			sh "rm -rf ${env.TMPDIR}"
			cleanWs()
		}
	}
}

if (currentBuild.currentResult != "SUCCESS") {
	notifyFailure(mattermostChannel: "#spack")
}
